# Enable C++ support
language: cpp

# Compiler selection
matrix:
  include:
    - compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gdb
            - apport
            - nvidia-opencl-dev
            # pocl
            - libltdl-dev
            - libhwloc-dev
            - pkg-config
            - libedit-dev

#cache:
#  directories:
#    - ${OPENCL_ROOT}

cache:
  directories:
    - ${DEPS_DIR}/llvm-${POCL_LLVM_VERSION}
    - ${POCL_ROOT}

before_install:
  # Install clang for pocl
  - |
    if [[ ${TRAVIS_OS_NAME} == "linux" && ${OPENCL_LIB} == "pocl" ]]; then
      mkdir -p ${DEPS_DIR}
      if [ -z "$(ls -A ${DEPS_DIR}/llvm-${POCL_LLVM_VERSION})" ]; then
        POCL_LLVM_URL=http://llvm.org/releases/${POCL_LLVM_VERSION}/clang+llvm-${POCL_LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz
        mkdir -p ${DEPS_DIR}/llvm-${POCL_LLVM_VERSION}
        travis_retry wget --no-check-certificate --quiet -O llvm-${POCL_LLVM_VERSION}.tar.xz ${POCL_LLVM_URL}
        tar xf llvm-${POCL_LLVM_VERSION}.tar.xz -C ${DEPS_DIR}/llvm-${POCL_LLVM_VERSION} --strip-components 1
      else
        echo 'Using cached LLVM.'
      fi
    fi
  # Install AMD APP SDK
  - |
    if [[ ${TRAVIS_OS_NAME} == "linux" && ${OPENCLU_LIB} == "amdappsdk" ]]; then
      mkdir -p ${OPENCL_ROOT}
      bash .travis/amd_sdk.sh ${AMDAPPSDK_VERSION}
      tar -xjf AMD-SDK.tar.bz2
      export OPENCL_VENDOR_PATH=${AMDAPPSDKROOT}/etc/OpenCL/vendors
      mkdir -p ${OPENCL_VENDOR_PATH}
      sh AMD-APP-SDK*.sh --tar -xf -C ${AMDAPPSDKROOT}
      echo libamdocl64.so > ${OPENCL_VENDOR_PATH}/amdocl64.icd
      export LD_LIBRARY_PATH=${AMDAPPSDKROOT}/lib/x86_64:${LD_LIBRARY_PATH}
      export CMAKE_LIBRARY_PATH=${AMDAPPSDKROOT}/lib/x86_64;
      chmod +x ${AMDAPPSDKROOT}/bin/x86_64/clinfo
      ${AMDAPPSDKROOT}/bin/x86_64/clinfo
      rm AMD-APP-SDK*.sh
      rm AMD-SDK.tar.bz2
    fi
  # Install recent cmake
  - |
    if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
      CMAKE_URL=${CMAKE_URL}
      mkdir -p ${DEPS_DIR}/cmake
      travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${DEPS_DIR}/cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi

  ############################################################################
  # Download OpenCL headers (and cl.hpp)
  ############################################################################
  - |
    if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
      mkdir -p ${OPENCL_ROOT}/include/CL
      pushd ${OPENCL_ROOT}/include/CL
      travis_retry git clone --depth 1 https://github.com/KhronosGroup/OpenCL-Headers.git
      mv ./OpenCL-Headers/opencl${OPENCL_HEADERS_VER}/CL/* .
      travis_retry wget -w 1 -np -nd -nv -A h,hpp --no-check-certificate ${OPENCL_REGISTRY}/api/2.1/cl.hpp;
      popd
    fi
  ############################################################################
  # Build and install POCL https://github.com/pocl/pocl
  ############################################################################
  - |
    if [[ ${TRAVIS_OS_NAME} == "linux" && ${OPENCL_LIB} == "pocl" ]]; then
      if [ -z "$(ls -A ${POCL_ROOT}/)" ]; then
        travis_retry git clone --depth 1 https://github.com/pocl/pocl.git -b ${POCL_BRANCH}
        cd pocl
        mkdir build
        cd build
        cmake -DDIRECT_LINKAGE=ON -DENABLE_ICD=OFF -DCMAKE_C_COMPILER=${POCL_C_COMPILER} -DCMAKE_CXX_COMPILER=${POCL_CXX_COMPILER} -DWITH_LLVM_CONFIG=${POCL_LLVM_CONFIG} -DCMAKE_INSTALL_PREFIX=${POCL_ROOT}/ ..
        make install
        cd ../..
      else
        echo 'Using cached POCL lib.'
      fi
    fi

install:
  - mkdir -p ${INSTALL_DIR}
  - export CPLUS_INCLUDE_PATH=${OPENCL_ROOT}/include
  - export LD_LIBRARY_PATH=${OPENCL_ROOT}/lib/x86_64:${INSTALL_DIR}:${LD_LIBRARY_PATH}
  - export LIBRARY_PATH=${OPENCL_ROOT}/lib/x86_64:${INSTALL_DIR}:${LIBRARY_PATH}

before_script:
 - ulimit -c unlimited -S # Enable core dumps

# Build steps
script:
  - ./autogen.sh
  #- ./configure  --without-opencl #--with-opencl=${AMDAPPSDKROOT}
  - ./configure --with-opencl=${OPENCL_ROOT} --prefix=${INSTALL_DIR}
  - make
  - make install
  - ls ${INSTALL_DIR}
  - make check
  - examples/tinytest/tinytest # print device names

# after_failure:
#  - ls
#  - COREFILE=$(find . -maxdepth 1 -name "core*" | head -n 1) # find core file
#  - if [[ -f "$COREFILE" ]]; then gdb -c "$COREFILE" ./benchmark -ex "thread apply all bt" -ex "set pagination 0" -batch; fi

notifications:
  recipients:
    - msuchard@gmail.com
    - daniel@kotim.me
  email:
    on_success: change
    on_failure: always

env:
  global:
  - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
  - INSTALL_DIR=${TRAVIS_BUILD_DIR}/install
  # - OPENCL_ROOT=$HOME/opencl
  - OPENCL_ROOT=${DEPS_DIR}/opencl
  - OPENCL_HEADERS_VER="22"
  - OPENCL_LIB=pocl
  - OPENCL_VERSION="12"
  # Khronos OpenCL ICD
  - OPENCL_REGISTRY=https://www.khronos.org/registry/cl
  # AMD APP
  - AMDAPPSDK_VERSION=291 # OpenCL 1.2
  - AMDAPPSDKROOT=${OPENCL_ROOT}/AMDAPPSDK
  # CMake
  - CMAKE_URL=https://cmake.org/files/v3.10/cmake-3.10.0-Linux-x86_64.tar.gz
  # POCL
  - POCL_BRANCH=release_1_0 # branch/tag
  - POCL_LLVM_VERSION=5.0.1
  - POCL_ROOT=${OPENCL_ROOT}/pocl-${POCL_BRANCH}/
  - POCL_LLVM_CONFIG=${DEPS_DIR}/llvm-${POCL_LLVM_VERSION}/bin/llvm-config
  - POCL_CXX_COMPILER=${DEPS_DIR}/llvm-${POCL_LLVM_VERSION}/bin/clang++
  - POCL_C_COMPILER=${DEPS_DIR}/llvm-${POCL_LLVM_VERSION}/bin/clang
  - POCL_OPENCL_LIB=${POCL_ROOT}/lib/libOpenCL.so
